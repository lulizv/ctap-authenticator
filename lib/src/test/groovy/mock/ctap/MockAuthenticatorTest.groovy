/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package mock.ctap

import com.fasterxml.jackson.databind.ObjectMapper
import com.webauthn4j.converter.util.CborConverter
import com.webauthn4j.converter.util.ObjectConverter
import com.webauthn4j.data.PublicKeyCredentialDescriptor
import com.webauthn4j.data.PublicKeyCredentialParameters
import com.webauthn4j.data.PublicKeyCredentialRpEntity
import com.webauthn4j.data.PublicKeyCredentialType
import com.webauthn4j.data.PublicKeyCredentialUserEntity
import com.webauthn4j.data.attestation.AttestationObject
import com.webauthn4j.data.attestation.statement.COSEAlgorithmIdentifier
import mock.ctap.interfaces.webauthnio.WebAuthnIORegistrationRequest
import mock.ctap.models.PublicKeyCredential
import org.json.JSONObject
import spock.lang.Shared
import spock.lang.Specification

class MockAuthenticatorTest extends Specification {

    @Shared MockAuthenticator authenticator = new MockAuthenticator()

    @Shared byte[] credentialId

    def "we can register"() {
        when:
        def inputJson = "{\n" +
                "    \"rp\": {\n" +
                "        \"name\": \"webauthn.io\",\n" +
                "        \"id\": \"webauthn.io\"\n" +
                "    },\n" +
                "    \"user\": {\n" +
                "        \"id\": \"cmFpZGlhbS10ZXN0\",\n" +
                "        \"name\": \"raidiam-test\",\n" +
                "        \"displayName\": \"raidiam-test\"\n" +
                "    },\n" +
                "    \"challenge\": \"TyvY9toArbeiGCFUDcZnM0fmaN1b5ZmvoVw_iPZQO_ASyC5i6ef_ZxNmVW-6oro46ORBJpiNlAz6-3eTZ69CHg\",\n" +
                "    \"pubKeyCredParams\": [\n" +
                "        {\n" +
                "            \"type\": \"public-key\",\n" +
                "            \"alg\": -7\n" +
                "        },\n" +
                "        {\n" +
                "            \"type\": \"public-key\",\n" +
                "            \"alg\": -257\n" +
                "        }\n" +
                "    ],\n" +
                "    \"timeout\": 60000,\n" +
                "    \"excludeCredentials\": [],\n" +
                "    \"authenticatorSelection\": {\n" +
                "        \"residentKey\": \"preferred\",\n" +
                "        \"requireResidentKey\": false,\n" +
                "        \"userVerification\": \"preferred\"\n" +
                "    },\n" +
                "    \"attestation\": \"none\",\n" +
                "    \"extensions\": {\n" +
                "        \"credProps\": true\n" +
                "    }\n" +
                "}"
        ObjectMapper objectMapper = new ObjectMapper();
        def registrationRequest = objectMapper.readValue(inputJson, WebAuthnIORegistrationRequest.class)
        def result = authenticator.makeCredential(registrationRequest)
        credentialId = result.getAuthenticatorData().getAttestedCredentialData().getCredentialId()

        then:
        System.out.println(webAuthnIOOutput(registrationRequest, result))

    }

    def "we can login"() {
        when:
        PublicKeyCredentialDescriptor descriptor = new PublicKeyCredentialDescriptor(PublicKeyCredentialType.PUBLIC_KEY, credentialId, null)
        def challenge = "rYN-sZUVQPbnsGkayXvweFm_TDNqwlHlVZgpMPS9rem7c6YcYGGLVblhjTu_DrCMAriDDY8YpGjKt8HGqzXF1w";
        def username = "raidiam2";
        def output = authenticator.getAssertion("webauthn.io", new byte[0], List.of(descriptor), challenge, username)

        then:
        System.out.println(output);
    }

    String webAuthnIOOutput(WebAuthnIORegistrationRequest request, AttestationObject object) {

        def clientDataJson = new JSONObject()
                                .put("type", "webauthn.create")
                                .put("challenge", request.getChallenge())
                                .put("origin", "https://webauthn.io")
                                .put("crossOrigin", false)
                                .toString().getBytes()
        def encodedClientDataJson = Base64.getEncoder().withoutPadding().encodeToString(clientDataJson)
        String id = Base64.getEncoder().withoutPadding().encodeToString(object.getAuthenticatorData().getAttestedCredentialData().getCredentialId())
        CborConverter converter = new ObjectConverter().getCborConverter()
        def attestationObject = Base64.getEncoder().withoutPadding().encodeToString(converter.writeValueAsBytes(object))
        return new JSONObject()
            .put("username", request.getUser().getName())
            .put("response", new JSONObject()
                .put("id", id)
                .put("rawId", id)
                .put("response", new JSONObject()
                    .put("attestationObject", attestationObject)
                    .put("clientDataJSON", encodedClientDataJson)
                    .put("transports", ["nfc", "usb"])
                )
                .put("type", "public-key")
                .put("clientExtensionResults", new JSONObject()
                    .put("credProps", new JSONObject()
                        .put("rk", true)
                    )
                )
                .put("authenticatorAttachment", "cross-platform")
            ).toString()
    }
}
